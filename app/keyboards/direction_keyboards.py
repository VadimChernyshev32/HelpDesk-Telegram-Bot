from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Tuple

class DirectionKeyboards:
    @staticmethod
    def direction_tickets_menu(user_id: int, tickets: List[Tuple], user_org: str, page: int = 1, page_size: int = 6) -> Tuple[str, InlineKeyboardMarkup]:
        filtered = [t for t in tickets if t[2] == user_org and t[6] == "–í —Ä–∞–±–æ—Ç–µ"]
        closed_count = len([t for t in tickets if t[2] == user_org and t[6] == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"])

        start = (page - 1) * page_size
        end = start + page_size
        current = filtered[start:end]

        text = (
            f"<b>ü§ò –¢–∏–∫–µ—Ç –º–µ–Ω—é üí≤</b>\n\n"
            f"<b>üî•–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ:</b> {len(filtered)}\n"
            f"<b>üëç–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:</b> {closed_count}\n\n"
            f"<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b> <i>–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ä–∞–±–æ—Ç—É. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∏—Ö –∑–∞–∫—Ä—ã—Ç–∏–∏!</i>"
        )

        builder = InlineKeyboardBuilder()
        if current:
            for ticket in current:
                builder.row(InlineKeyboardButton(
                    text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket[0]} - {ticket[5]}",
                    callback_data=f"ticket_{ticket[0]}"
                ))
        else:
            text += "\n\n<i>–ó–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.</i>"

        total_pages = (len(filtered) + page_size - 1) // page_size
        if total_pages > 1:
            nav = []
            if page > 1:
                nav.append(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"dir_panel_page_{page - 1}"))
            if page < total_pages:
                nav.append(InlineKeyboardButton(text="üîú –í–ø–µ—Ä—ë–¥", callback_data=f"dir_panel_page_{page + 1}"))
            builder.row(*nav)

        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        return text, builder.as_markup()


    def worker_menu(self, tickets: List[Tuple], worker_id: int, phone_user: str, organization_user: str, status: str,
                    is_director: bool = False, is_manager: bool = False) -> Tuple[str, InlineKeyboardMarkup]:
        text = (
            f"<b>–ù–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> <code>{phone_user}</code>\n"
            f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> <code>{organization_user}</code>\n"
            f"<b>–ü—Ä–∞–≤–∞ –≤ –±–æ—Ç–µ:</b> <code>{status}</code>"
        )

        builder = InlineKeyboardBuilder()

        # –ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞/–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if is_director or is_manager:
            for ticket in tickets:
                if ticket[6] == "–í —Ä–∞–±–æ—Ç–µ" and ticket[1] == worker_id:
                    builder.row(InlineKeyboardButton(
                        text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket[0]} - {ticket[5]}",
                        callback_data=f"ticket_{ticket[0]}"
                    ))

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä)
        if status == "worker" and is_director:
            builder.row(InlineKeyboardButton(
                text="üìà –î–∞—Ç—å –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                callback_data=f"update_worker_status_{worker_id}"
            ))
        elif status == "manager" and is_director:
            builder.row(InlineKeyboardButton(
                text="üìâ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                callback_data=f"update_worker_status_{worker_id}"
            ))

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä)
        if is_director:
            builder.row(InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                callback_data=f"delete_user_{worker_id}"
            ))

        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_company"))
        return text, builder.as_markup()


    def update_worker_status(self, worker_id: int) -> Tuple[str, str, InlineKeyboardMarkup]:
        text_for_worker = "–¢–µ–ø–µ—Ä—å –≤–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å—Ç–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
        text_for_manager = "–¢–µ–ø–µ—Ä—å –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º"

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"worker_menu_{worker_id}"))
        return text_for_worker, text_for_manager, builder.as_markup()


    def direction_menu_add_worker(self) -> Tuple[str, InlineKeyboardMarkup]:
        text = (
            "<b>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n"
            " - –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> \n<i>+79222222222</i>"
        )

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        return text, builder.as_markup()
